<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/04/14/docker/docker-ming-ling/"/>
      <url>/2023/04/14/docker/docker-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><p>查看docker运行状态</p><blockquote><p>sudo service docker status</p></blockquote><p>启动docker</p><blockquote><p>sudo service docker start</p></blockquote><p>拉取镜像</p><blockquote><p>sudo docker pull image:tag</p></blockquote><p>查看镜像</p><blockquote><p>sudo docker images</p><p>sudo docker image ls</p></blockquote><p>删除镜像</p><blockquote><p>docker rmi 镜像名称</p></blockquote><p>查看所有的容器</p><blockquote><p>sudo docker ps -a</p></blockquote><p>查看运行中的容器</p><blockquote><p>sudo docker ps</p></blockquote><p>退出容器</p><blockquote><p>exit</p></blockquote><p>创建一个新的容器并启动，run&lt;&#x3D;&#x3D;&gt;create and start</p><p>docker run启动容器时，不指定CMD （docker run -dit image:tag，无 &#x2F;bin&#x2F;bash）</p><blockquote><p>sudo docker run -it <image id> </p></blockquote><p>启动容器</p><blockquote><p>sudo docker start <CONTAINER ID></p></blockquote><p>停止容器</p><blockquote><p>docker stop 容器名称</p></blockquote><p>重启容器</p><blockquote><p>docker restart 容器名称</p></blockquote><p>删除容器</p><blockquote><p>docker rm 容器名称</p></blockquote><p>在容器中开启一个交互模式的终端</p><blockquote><p>sudo docker exec -it <CONTAINER ID> &#x2F;bin&#x2F;bash</p></blockquote><blockquote><ul><li>**-i :**即使没有附加也保持STDIN 打开</li><li>**-t :**分配一个伪终端</li></ul></blockquote><h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3><p><code>-it</code></p><p>参数<code>i</code>表示<code>interactive</code>，参数<code>t</code>表示创建一个虚拟的TTY（pseudo-TTY）。简单来说，<code>-it</code>参数可以让我们进入一个可以与容器进行交互的终端环境。</p><p> <code>—-rm</code></p><p>参数<code>—-rm</code>表示当容器退出后，自动删除容器。</p><p> <code>-v</code></p><p>使用-v参数将容器的某个目录和宿主机的某个目录绑定起来，使得容器在读写某个目录时，相当于在同时读写宿主机的某个目录。</p><p>参数<code>-v</code>的使用方法是<code>docker run -v &lt;宿主机的目录&gt;:&lt;容器的目录&gt; &lt;image_name&gt;</code></p><p><code>-v</code>参数是可以重复的，也就是说，可以在一条<code>docker run</code>命令中同时指定多个共享目录，比如：<code>docker run -it --rm -v /opt/mycontainer:/root -v /another/host/dir:/another/contianer/dir ubuntu /bin/bash</code></p><p><code>--name</code></p><p>参数<code>—-name</code>可以为启动的容器添加名字。我们之前的<code>docker run</code>命令都没有使用该参数，那么这时docker自己会为该容器分配一个随机字符串作为name</p><p><code>-p, —-publish</code></p><p>参数<code>—-publish</code>（可以简写为<code>-p</code>）表示将容器的某个端口暴露到宿主机的某个端口。</p><p>用法是<code>-p &lt;宿主机端口&gt;:&lt;容器端口&gt;</code>。和<code>-v</code>参数类似，<code>-p</code>参数也可以同时有多个。</p><p><code>-d, --detach</code></p><p>在很多时候我们不希望容器运行在前台，而只是想让它安安静静地作为<strong>后台</strong>进程提供服务。这时，就可以使用<code>—-detach</code>（简写为<code>-d</code>）参数。</p><p>需要查看容器的日志怎么办呢？很简单，使用<code>docker logs</code>命令docker logs <CONTAINER ID></p><h3 id="构建新镜像"><a href="#构建新镜像" class="headerlink" title="构建新镜像"></a>构建新镜像</h3><p><strong><code>docker commit</code></strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker commit &lt;container id&gt; &lt;container name&gt;:tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我想把当前容器的状态保存下来，以便下次启动容器的时候可以重新使用该文件；或者我想把当前容器发送给别人，让别人也看到我当前看到的容器的样子，该怎么办呢？可以使用<code>docker commit</code>命令将当前容器打包成一个新的镜像。</p><p>重新打开一个终端，查看一下当前容器的ID，然后直接<code>docker commit &lt;container_id&gt; &lt;new_image_name&gt;</code>，使用<code>docker image ls</code>可以看到这个新生成的镜像</p><p><strong><code>Dockerfile</code></strong></p><ol><li>创建一个新的文件夹，并在里面创建一个Dockerfile文件，内容改为：</li></ol><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM ubuntu:latestRUN apt-get update &amp;&amp; apt-get install -y nginx &amp;&amp; rm -rf &#x2F;var&#x2F;www&#x2F;html&#x2F;* &amp;&amp; echo &quot;19376449&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;index.htmlCMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用docker build命令从Dockerfile构建新镜像</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo docker build -t nginx-dockerfile -f .&#x2F;Dockerfile .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-t表示要构建的新的镜像的名称</li><li>-f表示Dockerfile文件的路径</li><li>命令中最后的单词表示表示构建镜像的上下文路径，上图中这个最后的单词是<code>.</code>，则表示上下文路径是当前目录。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/13/hello-world/"/>
      <url>/2023/04/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
